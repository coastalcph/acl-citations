#!/usr/bin/env python3

"""
Parse TEI files generated by GROBID to extract years of cited publications.

Usage:
  parse_tei.py -h
  parse_tei.py <file>... --csv <csvfile> [--debug]

Arguments:
  <file>                   TEI file(s) to be parsed.

Options:
  --csv <csvfile>          File to write citation data to.
  --debug                  Verbose log messages.
  -h, --help               Display this helpful text.
"""

from docopt import docopt
import better_exceptions
import csv
import logging
import logzero
from logzero import logger as log
from lxml import etree
import os


SCRIPTDIR = os.path.dirname(os.path.realpath(__file__))


def parse_tei_file(filename):
    tree = etree.parse(filename)
    base = os.path.basename(filename)
    citation_years = []
    bibitem_total = 0
    for bibitem in tree.getroot().findall(".//{*}listBibl/{*}biblStruct"):
        item_id = bibitem.get("{http://www.w3.org/XML/1998/namespace}id")
        bibitem_total += 1
        for dateitem in bibitem.findall(".//{*}date"):
            if dateitem.get("type") == "published":
                year = dateitem.get("when")[:4]
                if not year.isdigit():
                    log.warning(f"{base}, biblStruct id={item_id}: Date does not appear to contain a year: {dateitem.get('when')}")
                else:
                    citation_years.append(year)
                    break
        else:
            log.debug(f"{base}, biblStruct id={item_id}: Could not find a published date; skipping")
    if not citation_years:
        log.error(f"{base}: Could not find any bibliography dates")
    elif len(citation_years) < bibitem_total:
        diff = bibitem_total - len(citation_years)
        entries = "entries" if diff > 1 else "entry"
        log.warning(f"{base}: Could not parse dates for {diff} {entries}")
    return citation_years


def infer_publication_year(file_id):
    yearstr = file_id[1:3]
    if int(yearstr) < 50:
        return f"20{yearstr}"
    else:
        return f"19{yearstr}"


if __name__ == "__main__":
    args = docopt(__doc__)

    log_level = logging.DEBUG if args["--debug"] else logging.INFO
    logzero.loglevel(log_level)
    logzero.formatter(logzero.LogFormatter(datefmt="%Y-%m-%d %H:%M:%S"))

    cited_years = {}
    for filename in args["<file>"]:
        if not os.path.exists(filename):
            log.error(f"File not found: {filename}")
            continue
        base = os.path.basename(filename)
        file_id = base.split(".")[0]
        log.debug(f"Parsing {base}")
        cited_years[file_id] = parse_tei_file(filename)

    cited_count = sum(len(l) for l in cited_years.values())
    log.info(f"Found {cited_count} references with year.")

    with open(args["--csv"], 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter='\t',
                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
        for file_id, years in cited_years.items():
            pub_year = infer_publication_year(file_id)
            writer.writerow([file_id, pub_year, ','.join(years)])
